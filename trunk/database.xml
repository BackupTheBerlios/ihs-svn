<?xml version="1.0"?>
<!DOCTYPE project [
	<!ENTITY properties SYSTEM "file:xmls/properties.xml">
	<!ENTITY paths  SYSTEM "file:xmls/path_refs.xml">
]>
<project name="ihs" basedir="." default="createDatabase">
	&properties;
	&paths;

	<target name="cleanDatabase">
		<sql driver="${database.driver}"
			url="${database.url}" userid="${database.user}"
			password="${database.password}" rdbms="postgresql"
			classpathref="classpath" keepformat="true" delimiter=";;" onerror="continue">

			drop table ihs_config cascade;;

		</sql>
		<sql driver="${database.driver}"
			url="${database.url}" userid="${database.user}"
			password="${database.password}" rdbms="mysql"
			classpathref="classpath" keepformat="true" delimiter=";;" onerror="continue">
		
			drop table ihs_config;;

		</sql>

	</target>

	<target name="createDatabase">
		<sql driver="${database.driver}"
			url="${database.url}" userid="${database.user}"
			password="${database.password}" rdbms="postgresql"
			classpathref="classpath" keepformat="true" delimiter=";;">
<![CDATA[
create table ihs_config ( key varchar(32) not null, value text );;
alter table ihs_config add constraint ihs_config_pkey primary key(key);;
create view ihs_view_config as select key,value from ihs_config;;

create table ihs_administrators ( login text not null check( login<> '' ), password text check( password<>'' ));;
alter table ihs_administrators add constraint ihs_administrators_pkey primary key(login);;
create view ihs_view_administrators as select login,password from ihs_administrators;;

create table ihs_groups (group_name text not null check( group_name<> ''));;
alter table ihs_groups add constraint ihs_groups_pkey primary key(group_name);;
create view ihs_view_groups as select group_name from ihs_groups;;
insert into ihs_groups values('administrator');;

create table ihs_admins_groups (login text references ihs_administrators (login) on delete cascade on update cascade not null, group_name text references ihs_groups (group_name) on delete cascade on update cascade not null );;
alter table ihs_admins_groups add constraint ihs_admins_groups_pkey primary key(login,group_name);;
create view ihs_view_admins_groups as select login,group_name from ihs_admins_groups;;

CREATE OR REPLACE FUNCTION ihs_config_set(ihs_config.key%TYPE, ihs_config.value%TYPE) RETURNS integer AS '
DECLARE
	id integer := -1;
	a_key ALIAS FOR $1; 
	a_val ALIAS FOR $2; 
BEGIN
    IF( EXISTS (SELECT -1 FROM ihs_config WHERE key=a_key) ) THEN
        UPDATE ihs_config SET value=a_val WHERE key=a_key;
	ELSE
        INSERT INTO ihs_config (key,value) VALUES(a_key,a_val);
    END IF;
    RETURN 0;
END;' language 'plpgsql';;

CREATE OR REPLACE FUNCTION ihs_administrator_add
(ihs_administrators.login%TYPE, ihs_administrators.password%TYPE) RETURNS INTEGER AS '
DECLARE
	a_login ALIAS FOR $1;
	a_pass ALIAS FOR $2;
	ret INTEGER;
BEGIN
	ret := 0;
 
	IF ( EXISTS (SELECT 1 FROM ihs_administrators WHERE login=a_login) ) THEN
		ret := -1;
	ELSE
		INSERT INTO ihs_administrators (login,password)
			VALUES(a_login,a_pass);
		INSERT INTO ihs_admins_groups (login,group_name)
			VALUES(a_login,''administrator'');
		ret := 0;
	END IF;
	RETURN ret;
END;' language 'plpgsql';;

CREATE OR REPLACE FUNCTION ihs_administrator_rm
(ihs_administrators.login%TYPE)
RETURNS INTEGER AS '
DECLARE
	a_login ALIAS FOR $1;
BEGIN
	DELETE FROM ihs_administrators WHERE login=a_login;
	RETURN 0;
END;' language 'plpgsql';;

CREATE OR REPLACE FUNCTION ihs_administrator_change
(ihs_administrators.login%TYPE,
ihs_administrators.password%TYPE)
RETURNS INTEGER AS '
DECLARE
	a_login ALIAS FOR $1;
	a_pass ALIAS FOR $2;
	rows integer;
BEGIN
	UPDATE ihs_administrators SET password=a_pass WHERE login=a_login;
	GET DIAGNOSTICS rows = ROW_COUNT;
	IF rows = 1 THEN
		RETURN 0;
	END IF;
	RETURN -1;
END;' language 'plpgsql';;
]]>
		</sql>

		<sql driver="${database.driver}"
			url="${database.url}" userid="${database.user}"
			password="${database.password}" rdbms="mysql"
			classpathref="classpath" keepformat="true" delimiter=";;">
<![CDATA[
create table ihs_config ( `key` varchar(32) not null, `value` text );;
alter table ihs_config add constraint ihs_config_pkey primary key(`key`);;
create view ihs_view_config as select key,value from ihs_config;;

CREATE OR REPLACE FUNCTION ihs_config_set(a_key IN ihs_config.key%TYPE, a_val IN ihs_config.value%TYPE) RETURN integer IS
    CURSOR cur_exists IS SELECT -1 FROM ihs_config WHERE key=a_key;
    id integer := -1;
BEGIN
    OPEN cur_exists;
    FETCH cur_exists INTO id;
    IF cur_exists%NOTFOUND = TRUE THEN
        INSERT INTO ihs_config (key,value) VALUES(a_key,a_val);
    ELSE
        UPDATE ihs_config SET value=a_val WHERE key=a_key;
    END IF;
    CLOSE cur_exists;
    RETURN 0;
END;;
/
show errors;;

create table ihs_administrators ( login varchar(512) not null check( login<> '' ), password varchar(512) check( password<>'' ));;
alter table ihs_administrators add constraint ihs_administrators_pkey primary key(login);;
create view ihs_view_administrators as select login,password from ihs_administrators;;

create table ihs_groups (group_name varchar(512) not null check( group_name<> ''));;
alter table ihs_groups add constraint ihs_groups_pkey primary key(group_name);;
create view ihs_view_groups as select group_name from ihs_groups;;
insert into ihs_groups values('administrator');;

create table ihs_admins_groups(login varchar(512) references ihs_administrators (login) on delete cascade not null, group_name varchar(512) references ihs_groups (group_name) on delete cascade not null);;
alter table ihs_admins_groups add constraint ihs_admins_groups_pkey primary key(login,group_name);;
create view ihs_view_admins_groups as select login,group_name from ihs_admins_groups;;

CREATE OR REPLACE FUNCTION ihs_administrator_add
(a_login IN ihs_administrators.login%TYPE,
a_pass IN ihs_administrators.password%TYPE) RETURN INTEGER IS
	CURSOR cur_login IS SELECT 1 FROM ihs_administrators WHERE login=a_login;
	ret INTEGER;
BEGIN
	ret := 0;
 
	OPEN cur_login;
	FETCH cur_login INTO ret;
	IF cur_login%NOTFOUND = TRUE THEN
		INSERT INTO ihs_administrators (login,password)
			VALUES(a_login,a_pass);
		INSERT INTO ihs_admins_groups (login,group_name)
			VALUES(a_login,'administrator');
		ret := 0;
	ELSE
		ret := -1;
	END IF;
	CLOSE cur_login;
  
	RETURN ret;
END;;
/
show errors;;

CREATE OR REPLACE FUNCTION ihs_administrator_rm
(a_login IN ihs_administrators.login%TYPE)
RETURN INTEGER IS
BEGIN
	DELETE FROM ihs_administrators WHERE login=a_login;
	RETURN 0;
END;;
/
show errors;;

CREATE OR REPLACE FUNCTION ihs_administrator_change
(a_login IN ihs_administrators.login%TYPE,
a_pass IN ihs_administrators.password%TYPE)
RETURN INTEGER IS
BEGIN
	UPDATE ihs_administrators SET password=a_pass WHERE login=a_login;
	IF SQL%ROWCOUNT = 1 THEN
		RETURN 0;
	END IF;
	RETURN -1;
END;
/
show errors;;
]]>
		</sql>

		<sql driver="${database.driver}"
			url="${database.url}" userid="${database.user}"
			password="${database.password}" src="oracle.sql" rdbms="oracle"
			classpathref="classpath"/>
	</target>

	<target name="database-clean">
	</target>
</project>

