<?xml version="1.0" encoding="iso-8859-2"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
	[
	<!ENTITY biblio SYSTEM "biblio.xml">
	<!ENTITY cons.req SYSTEM "cons.req.xml">
	]
>
<book lang="pl">
	<bookinfo>
		<title>Incredible Hosting System</title>
		<authorgroup>
			<author>
				<firstname>Pawe³</firstname>
				<surname>Niewiadomski</surname>
			</author>
		</authorgroup>
		<copyright>
			<year>2005</year>
			<holder><ulink url="http://foo-baz.com">foo-baz.com</ulink></holder>
		</copyright>
	</bookinfo>

	<preface id="foreword">
		<title>S³owo wstêpne</title>

		<para>
		</para>
	</preface>

	<chapter id="intro">
		<title>Wprowadzenie</title>

		<para>
			Nastêpuj±cy rozdzia³ zawiera któtki opis projektu. Przedstawienie
			najwa¿niejszy wymagañ oraz ograniczeñ. Platformê u¿yt±
			w czasie realizacji. Zawiera równie¿ obja¶nienie
			najwa¿niejszych terminów.
		</para>
		
		<para>
			Dokument reprezentuje dokumentacjê projektow±
			zwi±zan± z realizowanym projektem. Kolejno s±
			to: wprowadzenie do systemu, rozwa¿ania projektowe,
			architektura systemu, polityki i strategie realizacji, 
			dok³adny projekt systemu, s³ownik terminów, bibliografia.
		</para>

		<para>
			Dokument skierowany jest przede wszystkim do 
			odbiorców zwi±zanych z informatyk±, st±d czêste wystêpowanie
			terminów u¿ywanych w tej dziedzinie. Grup± docelow±
			stanowi± administratorzy korzystaj±cy z systemu, programi¶ci
			chc±cy rozwijaæ system. Czê¶æ informacji mo¿e byæ równie¿
			przydatna dla u¿ytkowników takiego systemu.
		</para>

		<para>
			Realizowany projekt, który opisany jest niniejszym
			dokumencie, prezentowany jest w Sieci jako Incredible Hosting
			System, w skrócie <glossterm>IHS</glossterm>, w zwi±zku z tym taka nazwa bêdzie
			czêsto wykorzystywana bêdzie jako odwo³anie siê do ca³o¶ci systemu.
			Czê¶ci± IHS jest panel administracyjny s³u¿±cy do
			zarz±dzania poczt± darmow± oraz p³atn± przez strony WWW.
			Panel ten stanowi cze¶æ systemu realizowan± jako
			temat pracy magisterskiej. Poniewa¿ ten element nie mo¿e
			istnieæ bez innych czê¶ci wchodz±cych w sk³ad IHS dokument
			ten zawiera opis ca³ego systemu.
		</para>
		
		<para>
			Aby dok³adniej zrozumieæ specyfikê projektu, podjête
			decyzje projektowe oraz zapoznaæ siê z czê¶ci±
			wykorzystanego oprogramowania warto zapoznaæ siê
			z poprzednio realizowan± prac± pt. System poczty darmowej - NIE-2003.
			IHS oparty jest na do¶wiadczeniach uzyskanych w czasie realizacji
			poprzedniego systemu, jest to kolejny krok maj±cy na celu
			zapewnienie zintegrowanego ¶rodowiska do zarz±dzania u¿ytkownikami
			w systemach pocztowych czy hostingowych.
		</para>
	</chapter>

	<chapter id="overview">
		<title>Wprowadzenie do systemu</title>

		<para>
			IHS stanowiæ ma platformê do implementacji i 
			wdra¿ania systemów pocztowych czy hostingowych w ró¿nych
			¶rodowiskach - ma³ych i ¶rednich firmach potrzebuj±cych
			¶rodowiska do zarz±dzania kontami dla swoich pracowników,
			firmach realizuj±cych us³ugi oparte na systemie dla
			wszystkich zainteresowanych - niezale¿nie czy to bêd±
			us³ugi p³atne czy darmowe.
		</para>

		<para>
			Jest to skomplikowane zadanie wymagaj±ce wykorzystania
			i integracji wielu istniej±cych programów, nale¿y m.in.
			po³±czyæ takie systemy jak: serwer WWW, agent pocztowy,
			serwer FTP, bazy danych. Zale¿nie od wymagañ musi istnieæ
			mo¿liwo¶æ integracji systemu z innymi aplikacjami
			dzia³aj±cymi w ¶rodowisku, w którym bêdzie on wdra¿any.
		</para>

		<para>
			Poza integracj± tych systemów zbudowana musi zostaæ
			platforma umo¿liwiaj±ca zarz±dzanie ca³o¶ci± systemu
			niezale¿nie od elementów wykorzystanych w danym wdro¿eniu.
			Ma ona stanowiæ scentralizowane i ujednolicone
			¶rodowisko tak u¿ytkownika jak i programistyczne.
			Oznacza to, ¿e niezale¿nie od wykorzystanych elementów (np.
			ró¿nych dostawców baz danych) u¿ytkownik powinien mieæ
			dostêp do tego samego interfejsu. Programista natomiast
			ma mieæ mo¿liwo¶æ wykorzystania sta³ego i elastycznego
			API umo¿liwiaj±cego rozszerzanie czy ³±czenie systemu z
			innymi aplikacjami.
		</para>

		<para>
			IHS bêdzie oparty miêdzy innymi na nastêpuj±cych
			aplikacjach, technologiach:
			<itemizedlist>
				<listitem>
					<para>
						Apache jako serwer WWW;
					</para>
				</listitem>
				<listitem>
					<para>
						PostgreSQL jako domy¶lna baza danych;
					</para>
				</listitem>
				<listitem>
					<para>
						ProFTPD jako domy¶lny serwer FTP;
					</para>
				</listitem>
				<listitem>
					<para>
						qmail oraz Virtual Qmail jako agent poczty;
					</para>
				</listitem>
				<listitem>
					<para>
						CORBA jako protokó³ komunikacji miêdzy us³ugami;
					</para>
				</listitem>
				<listitem>
					<para>
						J2EE jako platforma, na której dzia³aæ bêdzie
						zintegrowany system zarz±dzania us³ugami.
					</para>
				</listitem>
			</itemizedlist>
		</para>

		<para>
			Wykorzystywane bêd± równie¿ inne aplikacje
			bez których realizacja projektu by³aby niemo¿liwa,
			powy¿sza lista zawiera te najwa¿niejsze, tworz±ce
			j±dro systemu.
		</para>

		<para>
			Realizacja oparta jest wy³±cznie na otwartym
			lub bezp³atny oprogramowaniu, wszelkie utworzone
			oprogramowanie bêdzie rozprowadzane wraz z
			kodem ¼ród³owym. Podej¶cie takie gwarantuje 
			maksymaln± elastyczno¶æ systemu oraz mo¿liwo¶æ
			dopasowywania go do potrzeb danego ¶rodowiska, w którym
			system bêdzie wdra¿any. Firma 
			<ulink url="http://foo-baz.com/">foo-baz.com</ulink>
			¶wiadczy us³ugi zwi±zane z instalacj±, integracj±
			oraz utrzymaniem IHS w ¶rodowisku klienta.
		</para>
	</chapter>

	<chapter id="considerations">
		<title>Rozwa¿ania projektowe</title>

		<para>
			Rozdzia³ zawiera istotne decyzje, sprawy do rozwi±zania
			w trakcie realizacji projektu.
		</para>

		<section id="cons.rel">
			<title>Oprogramowanie i sprzêt</title>
			<para>
				Podstaw± IHS bêdzie stanowi³ system operacyjny kompatybilny
				z Uniksem, w tym wypadku domy¶lnie bêdzie to Linux. Docelowo
				wspierane bêd± równie¿ takie systemy jak OpenBSD (rodzina *BSD),
				Solaris. Wykorzystywane bêd± dwie dystrybucje Linuksa - SuSe
				oraz Fedora Core. S± to jedna z najpopularniejszych
				dystrybucji, czêsto u¿ywane s± na serwerach.
			</para>

			<para>
				IHS opiera³ siê bêdzie o takie elementy jak serwer WWW,
				serwer aplikacji J2EE, MTA, serwer FTP. Zak³adana jest 
				mo¿liwo¶æ wymiany ka¿dej z aplikacji odpowiedzialnych
				za poszczególne funkcje - dlatego projekt bêdzie musia³
				byæ modularny, z wymiennymi, kompatybilnymi ze sob±
				czê¶ciami.
			</para>
			
			<para>
				Poniewa¿ jedyn± dostêpn± w czasie realizacji projektu,
				platform± sprzêtow± jest x86 projekt bêdzie realizowany w oparciu o ni±.
				Nie wykluczone jest natomiast u¿ywanie systemu na
				innych architekturach. Poniewa¿ na serwerach coraz
				czê¶ciej wykorzystywane s± procesory IA-64 warto by³oby
				jak najszybciej przygotowywaæ system w wersji na t±
				architekturê.
			</para>
		</section>

		<section id="cons.users">
			<title>U¿ytkownicy docelowi</title>

			<para>
				Docelowymi grupami u¿ytkowników s±:
				<itemizedlist>
					<listitem>
						<para>
							normalni u¿ytkownicy - nie posiadaj±, lub posiadaj±
							znikom± wiedzê na temat funkcjonowania systemu, 
							zainteresoany s± tylko wykorzystaniem
							¶wiadczonych przez system us³ug, wiedza
							informatyczna nie jest od nich wymagana; najmniejsze
							uprawnienia;
						</para>
					</listitem>
					<listitem>
						<para>
							administratorzy domen - posiadaj± wiedzê
							na temat opcji oferowanych przez system,
							ich wykorzystywania w zakresie prowadzonej
							przez nich dzia³alno¶ci, zainteresowani
							s± wykorzystywaniem us³ug udostêpnianych przez
							serwer oraz ich podstawow± konfiguracj± (w³±czanie,
							wy³±czanie, itp.), wiedza informatyczna nie jest
							od nich wymagana; uprawnienia poszerzone o zarz±dzanie
							us³ugami zwi±zanymi z zarz±dzan± domen±;
						</para>
					</listitem>
					<listitem>
						<para>
							administratorzy systemu - posiadaj± wiedzê
							na temat ¶rodowiska w jakim pracuje
							IHS,  instalacji oraz konfiguracji
							oprogramowania w tym ¶rodowisku, wymagana
							jest podstawowa znajomo¶æ wykorzystywanego
							przez IHS oprogramowania (np. instalacja
							wymaganych programów), znajomo¶æ systemu IHS;
							posiadaj± nieograniczone prawa;
						</para>
					</listitem>
					<listitem>
						<para>
							programi¶ci - posiadaj± wiedzê na temat
							funkcji oferowanych przez IHS, 
							architektury systemu, wykorzystywanych
							baz danych, opcji konfiguracyjnych, protoko³ó³
							komunikacyjnych, udostêpnianego API; znajomo¶æ
							informacji takich jak system operacyjny danej
							instalacji, wykorzystywane programy powinny
							byæ dla nich bez znaczenia; nie stanowi± bezpo¶rednich
							u¿ytkowników systemu;
						</para>
					</listitem>
				</itemizedlist>
			</para>

			<para>
				Ka¿da z grup u¿ytkowników musi byæ dynamicznie
				rozpoznawana. Jedna instalacja IHS musi byæ
				w stanie obs³u¿yæ ka¿dy rodzaj u¿ytkownika, na podstawie
				informacji przekazywanych od niego ustalana jest
				przynale¼no¶æ do danej grupy oraz adaptowane s± 
				udostêpniane funkcje. Powinna istnieæ równie¿ mo¿liwo¶æ
				limitowania dostêpu do danej instalacji tylko do
				u¿ytkowników wybranej grupy.
			</para>
		</section>

		<section id="cons.constraints">
			<title>Podstawowe za³o¿enia</title>

			<para>
				Realizowany projekt dzia³aæ ma w ¶rodowisku sieciowym,
				w architekturze klient-serwer. U¿ytkownicy wykorzystywaæ
				bêd± oferowane zasoby g³ównie za pomoc± ró¿nych programów
				sieciowych, takich jak: klient poczty, przegl±darka
				internetowa, klient FTP, itp.
			</para>

			<para>
				Aby zapewniæ mo¿liwo¶æ obs³u¿enia jak
				najwiêkszej ilo¶ci u¿ytkowników (zak³adaj±c poprawno¶æ
				dzia³ania wykorzystywanych przez nich programów) 
				¶wiadczone us³ugi powinny byæ zgodne z powszechnie obowi±zuj±cymi
				normami czy standardami. Jendocze¶nie nale¿y testowaæ
				system za pomoc± najpopularniejszych narzêdzi takich jak:
				Firefox, Internet Explorer, Thunderbird, Outlook Express, Outlook,
				Opera, The Bat. Wyrywkowo sprawdzaj±c system mniej popularnymi
				aplikacjami.
			</para>

			<para>
				Istotnym czynnikiem, na który nale¿y zwróciæ uwagê
				jest bezpieczeñstwo systemu jako ca³o¶ci oraz 
				pojedynczych us³ug, a tak¿e wysoka dostêpno¶æ systemu. W zwi±zku
				z tym, ¿e jednym z docelowych ¶rodowisk s± systemy 
				publiczne nale¿y liczyæ siê z mo¿liwo¶ci± ró¿nego rodzaju
				ataków czy to przez z³o¶liwych u¿ytkowników, robaki
				internetowe, itp. Nale¿y odpowiednio przemy¶leæ architekturê
				systemu, stosowane zabezpieczenia czy procedury.
			</para>

			<para>
				Poniewa¿ system tworzony jest aktualnie jako wolne oprogramowanie,
				bez sponsorów oraz innych ¼róde³ finansowania nale¿y ograniczyæ
				wszelkie zbêdne czynno¶ci do minimum. Jednocze¶nie nale¿y pamiêtaæ,
				¿e do takich czynno¶ci nie zalicza siê testowanie produktu czy to
				jednostkowe czy integracyjne. Tylko produkt o dobrej jako¶ci
				mo¿e zaistnieæ na rynku oraz siê na nim utrzymaæ. Dlatego te¿
				testowanie powinno odbywaæ siê jednocze¶nie z wytwarzaniem
				oprogramowania, a nawet wcze¶niej zgodnie z metod± programowania
				sterowanego testami.
			</para>

			<para>
				Zapewnienie jako¶ci dotyczyæ ma równie¿ dokumentacji systemu.
				Nieakceptowalna jest sytuacja gdy system rozwija siê bez
				dokumentacji. Wszelkie modyfikacje powinny byæ najpierw
				opisane a dopiero pó¼niej zaimplementowane. Takie podej¶cie
				zapewni aktualno¶æ i dobr± jako¶æ dokumentacji - dokumentacja
				tworzona po fakcie jest zawsze istotnie gorsza od dokumentacji
				tworzonej przed implentacj±. Dokumentacja zawsze powinna
				byæ tworzona w dwóch wersjach jêzykowych - polskiej i angielskiej.
				Komentarze w kodzie tworzone s± tylko w jêzyku angielskim. 
			</para>
		</section>

		<section id="cons.goals">
			<title>Gole i wytyczne</title>

			<para>
				W czasie realizacji projektu nale¿y braæ pod uwagê nastêpuj±ce
				wytyczne.
			</para>

			<para>
				Zachowanie zasady KISS (ang. keep it simple stupid!) - 
				architektura, algorytmy, mechanizmy u¿yte w czasie
				implementacji powinny byæ jak najprostrze. Dziêki temu
				powstanie produkt ³atwy w utrzymaniu, rozszerzaniu i
				instalacji.
			</para>

			<para>
				Brak przedwczesnej optymalizacji - optymalizacja
				mo¿e mieæ miejsce tylko i wy³±cznie po stwierdzeniu
				empirycznie faktu i¿ jest ona niezbêdna. Implementacja
				powinna skupiaæ siê na poprawno¶ci dzia³ania i 
				czytelno¶ci kodu, szybko¶æ jest spraw± nieistotn±.
			</para>

			<para>
				Liczy siê wygl±d i odczywanie programu - powinna istnieæ
				mo¿liwo¶æ zmiany ca³ego wygl±du aplikacji zgodnie
				z ¿yczeniem klienta. W czasie operacji wykonywanych
				przy udziale u¿ytkownika system musi dzia³aæ szybko 
				- u¿ytkownik nie mo¿e byæ zmuszony do d³u¿szego czekania
				na wyniki. Istotny jest czas otrzymania pierwszych
				wyników.
			</para>
		</section>

		&cons.req;
	</chapter>
	
	&biblio;
</book>

